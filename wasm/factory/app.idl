type InitConfigFactory = struct {
  vft_code_id: code_id,
  pool_code_id: code_id,
  factory_admin_account: vec actor_id,
  gas_for_program: u64,
};

type FactoryEvent = enum {
  ProgramCreated: struct { id: u64, vft_address: actor_id, pool_address: actor_id, init_config: InitConfig },
  GasUpdatedSuccessfully: struct { updated_by: actor_id, new_gas_amount: u64 },
  CodeIdUpdatedSuccessfully: struct { updated_by: actor_id, new_code_id: code_id },
  AdminAdded: struct { updated_by: actor_id, admin_actor_id: actor_id },
  RegistryRemoved: struct { removed_by: actor_id, program_for_id: u64 },
};

type InitConfig = struct {
  name: str,
  symbol: str,
  decimals: u8,
  type_pool: str,
  distribution_mode: str,
  access_type: str,
  participants: vec actor_id,
};

type FactoryError = enum {
  ProgramInitializationFailed,
  ProgramInitializationFailedWithContext: str,
  Unauthorized,
  UnexpectedFTEvent,
  MessageSendError,
  NotFound,
  IdNotFoundInAddress,
  IdNotFound,
};

type Record = struct {
  name: str,
};

constructor {
  New : (init: InitConfigFactory);
};

service Factory {
  AddAdminToFactory : (admin_actor_id: actor_id) -> result (FactoryEvent, FactoryError);
  /// Despliegue del contrato Pool
  CreatePool : (init_config: InitConfig, vft_address: actor_id) -> result (actor_id, FactoryError);
  /// Despliegue del contrato VFT
  CreateVft : (init_config: InitConfig) -> result (actor_id, FactoryError);
  /// Despliegue combinado de VFT y Pool
  CreateVftAndPool : (init_config: InitConfig) -> result (FactoryEvent, FactoryError);
  RemoveRegistry : (program_for_id: u64) -> result (FactoryEvent, FactoryError);
  UpdateCodeId : (new_vft_code_id: opt code_id, new_pool_code_id: opt code_id) -> result (FactoryEvent, FactoryError);
  UpdateGasForProgram : (new_gas_amount: u64) -> result (FactoryEvent, FactoryError);
  query Admins : () -> vec actor_id;
  /// Leer el gas asignado para los programas
  query GasForProgram : () -> u64;
  query IdToAddress : () -> vec struct { u64, actor_id };
  query Number : () -> u64;
  /// Leer el `CodeId` actual del Pool
  query PoolCodeId : () -> code_id;
  /// Leer el registro completo
  query Registry : () -> vec struct { actor_id, vec struct { u64, Record } };
  /// Leer el `CodeId` actual del VFT
  query VftCodeId : () -> code_id;
};

