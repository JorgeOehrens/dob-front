type VftManagerEvents = enum {
  NewAdminAdded: actor_id,
  NewParticipant: actor_id,
  RefundOfVaras: u128,
  VFTContractIdSet,
  MinTokensToAddSet,
  MaxTokensToBurnSet,
  TokensAdded,
  TokensBurned,
  SetTokensPerVaras,
  TotalSwapInVaras: u128,
  TokensSwapSuccessfully: struct { total_tokens: u128, total_varas: u128 },
  RewardsClaimed: struct { total_rewards: u128 },
  Error: VftManagerErrors,
};

type VftManagerErrors = enum {
  MinTokensToAdd: u128,
  NoPendingRewards,
  FailedToSendRewards,
  MaxTokensToBurn: u128,
  InsufficientTokens: struct { total_contract_suply: u128, tokens_to_burn: u128 },
  CantSwapTokens: struct { tokens_in_vft_contract: u256 },
  CantSwapUserTokens: struct { user_tokens: u256, tokens_to_swap: u256 },
  ContractCantMint,
  CantSwapTokensWithAmount: struct { min_amount: u128, actual_amount: u128 },
  OnlyAdminsCanDoThatAction,
  VftContractIdNotSet,
  ErrorInVFTContract,
  ErrorInGetNumOfVarasToSwap,
  OperationWasNotPerformed,
};

type VftManagerQueryEvents = enum {
  ContractBalanceInVaras: u128,
  PoolDetails: struct { admins: vec actor_id, name: str, type_pool: str, distribution_mode: str, access_type: str, participants: vec actor_id, vft_contract_id: opt actor_id, transaction_count: u256, transactions: vec struct { u256, Transaction } },
  PendingRewards: struct { address: actor_id, total_rewards: u128, transactions: vec Transaction },
  Rewards: vec struct { u256, Transaction, bool },
  UserTotalTokensAsU128: u128,
  UserTotalTokens: u256,
  TotalTokensToSwap: u256,
  TotalTokensToSwapAsU128: u128,
  TokensToSwapOneVara: u128,
  NumOfTokensForOneVara: u128,
  Error: VftManagerErrors,
};

type Transaction = struct {
  destination: actor_id,
  value: u128,
  executed: bool,
};

constructor {
  New : ();
  NewWithData : (name: str, type_pool: str, distribution_mode: str, access_type: str, participants: vec actor_id, vft_contract_id: opt actor_id, admins: vec actor_id);
};

service VftManager {
  AddAdmin : (new_admin_address: actor_id) -> VftManagerEvents;
  AddParticipant : (participant: actor_id) -> VftManagerEvents;
  AddTransaction : (destination: actor_id, value: u128) -> u256;
  Distribution : () -> null;
  DistributionPoolBalance : () -> null;
  RewardsClaimed : (address: actor_id) -> VftManagerEvents;
  SetVftContractId : (vft_contract_id: actor_id) -> VftManagerEvents;
  query PendingRewards : (address: actor_id) -> VftManagerQueryEvents;
  query PoolDetails : () -> VftManagerQueryEvents;
  /// ## Returns the total number of tokens in the contract (In U256 format)
  /// Additionally, it returns all transactions with their execution status.
  query Rewards : () -> VftManagerQueryEvents;
};

